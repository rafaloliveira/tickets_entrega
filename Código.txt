import streamlit as st
import pandas as pd
from datetime import datetime
import time
from dateutil import parser
import os

# --- CONFIGURA√á√ïES ---
st.set_page_config(page_title="Gest√£o de Ocorr√™ncias", layout="wide")

# --- TEMA ESCURO PERSONALIZADO ---
st.markdown("""
<style>
    body {
        background-color: #121212;
        color: #FFFFFF;
    }
    .stTabs [role="tab"] {
        background-color: #1e1e1e;
        padding: 8px;
        border-radius: 5px;
        color: #ffffff;
    }
    .stTabs [aria-selected="true"] {
        background-color: #057a55 !important;
        color: white !important;
    }
</style>
""", unsafe_allow_html=True)

# --- CARREGAMENTO DE DADOS ---
clientes = pd.read_csv("data/clientes.csv")["Cliente"].dropna().tolist()
motoristas = pd.read_csv("data/motoristas.csv")["Motorista"].dropna().tolist()

# --- INICIALIZA√á√ÉO DE SESS√ÉO ---
if "ocorrencias_abertas" not in st.session_state:
    st.session_state.ocorrencias_abertas = []

if "ocorrencias_finalizadas" not in st.session_state:
    st.session_state.ocorrencias_finalizadas = []

# --- ABAS ---
aba1, aba2, aba3 = st.tabs(["üìù Nova Ocorr√™ncia", "üìå Ocorr√™ncias em Aberto", "‚úÖ Ocorr√™ncias Finalizadas"])

# =========================
#       ABA 1 - NOVA
# =========================
with aba1:
    st.header("Nova Ocorr√™ncia")

    with st.form("form_nova_ocorrencia",clear_on_submit=True):
        col1, col2 = st.columns(2)

        with col1:
            nf = st.text_input("Nota Fiscal", key="nf")
            cliente_opcao = st.selectbox("Cliente", options=clientes + ["Outro (digitar manualmente)"], index=None, key="cliente_opcao")
            cliente = st.text_input("Digite o nome do cliente", key="cliente_manual") if cliente_opcao == "Outro (digitar manualmente)" else cliente_opcao
            destinatario = st.text_input("Destinat√°rio", key="destinatario")
            cidade = st.text_input("Cidade", key="cidade")

        with col2:
            motorista_opcao = st.selectbox("Motorista", options=motoristas + ["Outro (digitar manualmente)"], index=None, key="motorista_opcao")
            motorista = st.text_input("Digite o nome do motorista", key="motorista_manual") if motorista_opcao == "Outro (digitar manualmente)" else motorista_opcao
            tipo = st.multiselect("Tipo de Ocorr√™ncia", options=["Chegada no Local", "Pedido Bloqueado", "Demora", "Diverg√™ncia"], key="tipo_ocorrencia")
            obs = st.text_area("Observa√ß√µes", key="observacoes")
            responsavel = st.text_input("Quem est√° abrindo o ticket", key="responsavel")

        enviar = st.form_submit_button("Adicionar Ocorr√™ncia")

        if enviar:
            campos_obrigatorios = {
                "Nota Fiscal": nf,
                "Cliente": cliente,
                "Destinat√°rio": destinatario,
                "Cidade": cidade,
                "Motorista": motorista,
                "Tipo de Ocorr√™ncia": tipo,
                "Respons√°vel": responsavel
            }

            faltando = [campo for campo, valor in campos_obrigatorios.items() if not valor]

            if faltando:
                st.error(f"‚ùå Preencha todos os campos obrigat√≥rios: {', '.join(faltando)}")
            else:
                nova_ocorrencia = {
                    "Nota Fiscal": nf,
                    "Cliente": cliente,
                    "Destinatario": destinatario,
                    "Cidade": cidade,
                    "Motorista": motorista,
                    "Tipo de Ocorr√™ncia": ", ".join(tipo),
                    "Observa√ß√µes": obs,
                    "Respons√°vel": responsavel,
                    "Data/Hora Abertura": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
                    "Abertura Timestamp": datetime.now(),
                    "Complementar": "",
                    "Data/Hora Finaliza√ß√£o": ""
                }
                st.session_state.ocorrencias_abertas.append(nova_ocorrencia)

                sucesso = st.empty()
                sucesso.success("‚úÖ Ocorr√™ncia aberta com sucesso!")
                time.sleep(2)
                sucesso.empty()
                

# =========================
#    FUN√á√ÉO CLASSIFICA√á√ÉO
# =========================
# Fun√ß√£o para classificar a ocorr√™ncia com base no tempo decorrido entre abertura e finaliza√ß√£o
# Fun√ß√£o para classificar a ocorr√™ncia com base no tempo decorrido entre abertura e a hora atual
# Fun√ß√£o para classificar a ocorr√™ncia com tratamento robusto
def classificar_ocorrencia_por_tempo(data_abertura_str):
    # Converte a string para datetime
    try:
        data_abertura = datetime.strptime(data_abertura_str, "%d/%m/%Y %H:%M:%S")
    except Exception as e:
        return "Erro", "gray"

    # Pega o momento atual
    agora = datetime.now()

    # Calcula o tempo decorrido em minutos
    tempo_decorrido = (agora - data_abertura).total_seconds() / 60

    # Define o status e a cor com base no tempo decorrido
    if tempo_decorrido < 15:
        return "üü¢ At√© 15 min", "#2ecc71"
    elif tempo_decorrido < 30:
        return "üü° 15 a 30 min", "#f1c40f"
    elif tempo_decorrido < 45:
        return "üü† 30 a 45 min", "#e67e22"
    elif tempo_decorrido < 60:
        return "üî¥ 45 a 60 min", "#e74c3c"
    else:
        return "üö® +60 min", "#c0392b"

# =========================
#     ABA 2 - EM ABERTO
# =========================
with aba2:
    st.header("Ocorr√™ncias em Aberto")

    def salvar_ocorrencia_finalizada(ocorr, status):
        pasta = os.path.join("data", "relatorio_de_tickets")
        caminho = os.path.join(pasta, "relatorio_ocorrencias.xlsx")
        os.makedirs(pasta, exist_ok=True)

        ocorr["Est√°gio"] = status
        df_nova = pd.DataFrame([ocorr])

        if not os.path.exists(caminho):
            df_nova.to_excel(caminho, index=False)
        else:
            df_existente = pd.read_excel(caminho)
            df_final = pd.concat([df_existente, df_nova], ignore_index=True)
            df_final.to_excel(caminho, index=False)

    if not st.session_state.ocorrencias_abertas:
        st.info("Nenhuma ocorr√™ncia aberta no momento.")
    else:
        colunas = st.columns(4)
        for idx, ocorr in list(enumerate(st.session_state.ocorrencias_abertas)):
            data_abertura = ocorr.get("Data/Hora Abertura") or ocorr.get("Abertura Timestamp")

            try:
                # Parse expl√≠cito usando o formato conhecido
                if isinstance(data_abertura, str):
                    data_abertura = datetime.strptime(data_abertura, "%d/%m/%Y %H:%M:%S")
                elif not isinstance(data_abertura, datetime):
                    raise ValueError(f"Formato de data inv√°lido: {data_abertura}")

                status, cor = classificar_ocorrencia_por_tempo(ocorr.get("Data/Hora Abertura"))

            except Exception as e:
                st.error(f"Erro ao processar ocorr√™ncia (NF: {ocorr.get('Nota Fiscal', '-')}) ‚Äî {e}")
                continue

            with colunas[idx % 4]:
                st.markdown(f"### ‚è±Ô∏è {status}")
                st.markdown(
                    f"<div style='background-color:{cor};padding:10px;border-radius:10px'>", 
                    unsafe_allow_html=True
                )
                st.write(f"**NF:** {ocorr.get('Nota Fiscal', '-')}")
                st.write(f"**Cliente:** {ocorr.get('Cliente', '-')}")
                st.write(f"**Cidade:** {ocorr.get('Cidade', '-')}")
                st.write(f"**Motorista:** {ocorr.get('Motorista', '-')}")
                st.write(f"**Tipo:** {ocorr.get('Tipo de Ocorr√™ncia', '-')}")
                st.write(f"**Aberto por:** {ocorr.get('Respons√°vel', '-')}")
                st.write(f"**Data/Hora Abertura:** {data_abertura.strftime('%d/%m/%Y %H:%M:%S')}")
                st.markdown("</div>", unsafe_allow_html=True)

                with st.expander("Finalizar Ocorr√™ncia"):
                    complemento = st.text_area("Complemento", key=f"complemento_final_{idx}")
                    if st.button("Finalizar", key=f"finalizar_{idx}"):
                        if not complemento.strip():
                            st.error("‚ùå O campo 'Complementar' √© obrigat√≥rio para finalizar a ocorr√™ncia.")
                        else:
                            ocorr["Complementar"] = complemento
                            ocorr["Data/Hora Finaliza√ß√£o"] = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
                            salvar_ocorrencia_finalizada(ocorr, status)
                            st.session_state.ocorrencias_finalizadas.append(ocorr)
                            st.session_state.ocorrencias_abertas.pop(idx)
                            st.success("‚úÖ Ocorr√™ncia finalizada!")
                            st.rerun()

                            

# =========================
#     ABA 3 - FINALIZADAS
# =========================
with aba3:
    st.markdown("### üîé Filtro por Nota Fiscal")

    col_filtro, _ = st.columns([1, 5])  # Campo no canto esquerdo
    with col_filtro:
        nf_busca = st.text_input("Nota Fiscal", placeholder="Nota Fiscal")

    # Usa somente ocorr√™ncias finalizadas
    ocorrencias = st.session_state.get("ocorrencias_finalizadas", [])

    # Se houver algo digitado, aplica o filtro
    if nf_busca:
        ocorrencias_filtradas = [
            ocorr for ocorr in ocorrencias
            if nf_busca.strip() in str(ocorr.get("Nota Fiscal", ""))
        ]
    else:
        ocorrencias_filtradas = ocorrencias

    if not ocorrencias_filtradas:
        st.info("Nenhuma ocorr√™ncia finalizada encontrada.")
    else:
        colunas = st.columns(4)
        for idx, ocorr in enumerate(ocorrencias_filtradas):
            # Classifica com base na data/hora da abertura
            status, cor = classificar_ocorrencia_por_tempo(ocorr["Data/Hora Abertura"])
            
            with colunas[idx % 4]:
                st.markdown(f"### ‚è±Ô∏è {status}")
                st.markdown(f"<div style='background-color:{cor};padding:10px;border-radius:10px'>", unsafe_allow_html=True)
                st.write(f"**NF:** {ocorr['Nota Fiscal']}")
                st.write(f"**Cliente:** {ocorr['Cliente']}")
                st.write(f"**Cidade:** {ocorr['Cidade']}")
                st.write(f"**Motorista:** {ocorr['Motorista']}")
                st.write(f"**Tipo:** {ocorr['Tipo de Ocorr√™ncia']}")
                st.write(f"**Aberto por:** {ocorr['Respons√°vel']}")
                st.write(f"**Data/Hora:** {ocorr['Data/Hora Abertura']}")
                st.write(f"**Finalizado em:** {ocorr['Data/Hora Finaliza√ß√£o']}")
                st.write(f"**Complementar:** {ocorr['Complementar']}")
                st.markdown("</div>", unsafe_allow_html=True)


