import streamlit as st
import pandas as pd
import os
from datetime import datetime, timedelta
import time
from dateutil import parser
from streamlit_autorefresh import st_autorefresh
import yaml
import streamlit_authenticator as stauth
import pytz
import uuid

# --- DEVE SER A PRIMEIRA CHAMADA ---
st.set_page_config(page_title="Gest√£o de Ocorr√™ncias", layout="wide")

# ------------------------------------------------------TELA DE LOGIN --------------------------------------------------------
# --- USU√ÅRIOS E SENHAS (simples, n√£o para produ√ß√£o) ---
USERS = {
    "rafael": "1234",
    "user2": "senha456"
}

# --- Fun√ß√£o de autentica√ß√£o ---
def autenticar(username, senha):
    return USERS.get(username) == senha

# --- Interface de Login ---
def login():
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown("<h1 style='text-align: center;'>üìù Gest√£o de Ocorr√™ncias</h1>", unsafe_allow_html=True)


    if "login" not in st.session_state:
        st.session_state.login = False
    if "username" not in st.session_state:
        st.session_state.username = ""

    if not st.session_state.login:
        # Centralizar com colunas
        col1, col2, col3 = st.columns([1, 2, 1])

        with col2:
            st.markdown("##### Login")
            username = st.text_input("Usu√°rio")
            senha = st.text_input("Senha", type="password")
            if st.button("Entrar"):
                if autenticar(username, senha):
                    st.session_state.login = True
                    st.session_state.username = username
                    st.rerun()
                else:
                    st.error("Usu√°rio ou senha inv√°lidos")
            st.markdown(" ")

        st.stop()  # Impede que o app continue carregando sem login

    else:
        # Sauda√ß√£o no topo
        st.markdown(f"üëã **Bem-vindo, {st.session_state.username}!**")

        # Bot√£o de sair alinhado √† direita
        col1, col2, col3 = st.columns([6, 1, 1])  # Ajuste os pesos conforme preferir
        with col3:
            if st.button("üîí Sair"):
                st.session_state.login = False
                st.session_state.username = ""
                st.rerun()


# --- Chama login antes de qualquer coisa ---
login()

# --- SE CHEGOU AQUI, USU√ÅRIO EST√Å AUTENTICADO ---
#--------------------------------------------------------------------------INICIO APP --------------------------------------------------------------
# --- CARREGAMENTO DE DADOS Tabelas com nomes de motorista e clientes ---
clientes = pd.read_csv("data/clientes.csv")["Cliente"].dropna().tolist()
motoristas = pd.read_csv("data/motoristas.csv")["Motorista"].dropna().tolist()

# --- INICIALIZA√á√ÉO DE SESS√ÉO ---
if "ocorrencias_abertas" not in st.session_state:
    st.session_state.ocorrencias_abertas = []

if "ocorrencias_finalizadas" not in st.session_state:
    st.session_state.ocorrencias_finalizadas = []

# --- ABAS ---
aba1, aba2, aba3 = st.tabs(["üìù Nova Ocorr√™ncia", "üìå Ocorr√™ncias em Aberto", "‚úÖ Ocorr√™ncias Finalizadas"])

# =========================
#       ABA 1 - NOVA
# =========================
with aba1:
    st.header("Nova Ocorr√™ncia")

    with st.form("form_nova_ocorrencia", clear_on_submit=True):
        col1, col2 = st.columns(2)

        with col1:
            # Campo de Nota Fiscal - Apenas n√∫meros
            nf = st.text_input("Nota Fiscal", key="nf")

            # Verifica se a entrada da Nota Fiscal √© v√°lida
            nf_invalida = nf != "" and not nf.isdigit()
            if nf_invalida:
                st.error("Por favor, insira apenas n√∫meros na Nota Fiscal.")

            cliente_opcao = st.selectbox("Cliente", options=clientes + ["Outro ()"], index=None, key="cliente_opcao")
            cliente = st.text_input("Digite o nome do cliente", key="cliente_manual") if cliente_opcao == "Outro (digitar manualmente)" else cliente_opcao
            destinatario = st.text_input("Destinat√°rio", key="destinatario")
            cidade = st.text_input("Cidade", key="cidade")

        with col2:
            motorista_opcao = st.selectbox("Motorista", options=motoristas + ["Outro (digitar manualmente)"], index=None, key="motorista_opcao")
            motorista = st.text_input("Digite o nome do motorista", key="motorista_manual") if motorista_opcao == "Outro (digitar manualmente)" else motorista_opcao
            tipo = st.multiselect("Tipo de Ocorr√™ncia", options=["Chegada no Local", "Pedido Bloqueado", "Demora", "Diverg√™ncia"], key="tipo_ocorrencia")
            obs = st.text_area("Observa√ß√µes", key="observacoes")
            responsavel = st.text_input("Quem est√° abrindo o ticket", key="responsavel")

        # Bot√£o para enviar
        enviar = st.form_submit_button("Adicionar Ocorr√™ncia")

        if enviar:
            # Verifica se algum campo obrigat√≥rio est√° vazio
            campos_obrigatorios = {
                "Nota Fiscal": nf,
                "Cliente": cliente,
                "Destinat√°rio": destinatario,
                "Cidade": cidade,
                "Motorista": motorista,
                "Tipo de Ocorr√™ncia": tipo,
                "Respons√°vel": responsavel
            }

            faltando = [campo for campo, valor in campos_obrigatorios.items() if not valor]

            # Caso a Nota Fiscal seja inv√°lida ou algum campo obrigat√≥rio esteja vazio
            if nf_invalida:
                st.error("Ocorr√™ncia n√£o adicionada: Nota Fiscal deve conter apenas n√∫meros.")
            elif faltando:
                st.error(f"‚ùå Preencha todos os campos obrigat√≥rios: {', '.join(faltando)}")
            else:
                # Define fuso hor√°rio de S√£o Paulo
                fuso_sp = pytz.timezone("America/Sao_Paulo")
                agora_sp = datetime.now(fuso_sp)

                # Adiciona a nova ocorr√™ncia
                nova_ocorrencia = {
                    "ID": str(uuid.uuid4()),  # ID √∫nico
                    "Nota Fiscal": nf,
                    "Cliente": cliente,
                    "Destinatario": destinatario,
                    "Cidade": cidade,
                    "Motorista": motorista,
                    "Tipo de Ocorr√™ncia": ", ".join(tipo),
                    "Observa√ß√µes": obs,
                    "Respons√°vel": responsavel,
                    "Data/Hora Abertura": agora_sp.strftime("%d/%m/%Y %H:%M:%S"),
                    "Abertura Timestamp": agora_sp.replace(tzinfo=None),  # sem timezone para salvar no Excel
                    "Complementar": "",
                    "Data/Hora Finaliza√ß√£o": ""
                }
                st.session_state.ocorrencias_abertas.append(nova_ocorrencia)

                # Exibe o sucesso
                sucesso = st.empty()
                sucesso.success("‚úÖ Ocorr√™ncia aberta com sucesso!")
                time.sleep(2) 
                sucesso.empty()
                # Aguarda um tempo e limpa a mensagem de sucesso
                

# =========================
#    FUN√á√ÉO CLASSIFICA√á√ÉO
# =========================
# Fun√ß√£o para classificar a ocorr√™ncia com base no tempo decorrido entre abertura e finaliza√ß√£o
# Fun√ß√£o para classificar a ocorr√™ncia com base no tempo decorrido entre abertura e a hora atual
# Fun√ß√£o para classificar a ocorr√™ncia com tratamento robusto
# Fun√ß√£o para classificar a ocorr√™ncia de acordo com o tempo decorrido
def classificar_ocorrencia_por_tempo(data_abertura_str):
    try:
        tz_sp = pytz.timezone("America/Sao_Paulo")
        data_abertura = datetime.strptime(data_abertura_str, "%d/%m/%Y %H:%M:%S")
        data_abertura = tz_sp.localize(data_abertura)  # Torna data_abertura "aware"
    except Exception as e:
        return "Erro", "gray"

    agora = datetime.now(tz_sp)
    tempo_decorrido = (agora - data_abertura).total_seconds() / 60

    if tempo_decorrido < 15:
        return "üü¢ Normal", "#2ecc71"
    elif tempo_decorrido < 30:
        return "üü° Alerta", "#f1c40f"
    elif tempo_decorrido < 45:
        return "üü† Urgente", "#e67e22"
    elif tempo_decorrido < 60:
        return "üî¥ Cr√≠tico", "#e74c3c"
    else:
        return "üö® +60 min", "#c0392b"

# ----------------------------------------------------------------Fun√ß√£o para salvar ocorr√™ncia finalizada em Excel---------------------------------

# -------------------------------------------------------------------AINDA FUN√á√ÉO -----------------------------------------------------------
# =========================
#     ABA 2 - EM ABERTO
# =========================
with aba2:
    st.header("Ocorr√™ncias em Aberto")
    # Exibe mensagem de sucesso, se existir
    if st.session_state.get("mensagem_sucesso_finalizacao"):
        st.success("‚úÖ Ocorr√™ncia finalizada com sucesso!")
        del st.session_state["mensagem_sucesso_finalizacao"]
#-------------------------------------------------------------------------------------------------------------------------------
    def salvar_ocorrencia_finalizada(ocorr, status): ### fun√ß√£o salva ocorrencia finalizada Excel
        pasta = os.path.join("data", "relatorio_de_tickets")
        caminho = os.path.join(pasta, "relatorio_ocorrencias.xlsx")
        os.makedirs(pasta, exist_ok=True)

        ocorr["Est√°gio"] = status
        df_nova = pd.DataFrame([ocorr])

        if not os.path.exists(caminho):
            df_nova.to_excel(caminho, index=False)
        else:
            df_existente = pd.read_excel(caminho)

            # Junta e remove duplicatas com base no ID exclusivo
            # Remover qualquer ocorr√™ncia com o mesmo ID antes de salvar
            df_existente = df_existente[df_existente["ID"] != ocorr["ID"]]
            # Concatenar a nova ocorr√™ncia
            df_final = pd.concat([df_existente, df_nova], ignore_index=True)

            

        # Remove timezone de todas as colunas datetimetz (caso existam)
        for col in df_final.select_dtypes(include=["datetimetz"]).columns:
            df_final[col] = df_final[col].dt.tz_localize(None)

        df_final.to_excel(caminho, index=False)
#------------------------------------------------------------------------
    if not st.session_state.ocorrencias_abertas:
        st.info("Nenhuma ocorr√™ncia aberta no momento.")
    else:
        colunas = st.columns(4)
        st_autorefresh(interval=10000, key="ocorrencias_abertas_refresh")

        for idx, ocorr in list(enumerate(st.session_state.ocorrencias_abertas)):
            data_abertura_str = ocorr.get("Data/Hora Abertura") or ocorr.get("Abertura Timestamp")

            try:
                status, cor = classificar_ocorrencia_por_tempo(data_abertura_str)
                data_abertura = datetime.strptime(data_abertura_str, "%d/%m/%Y %H:%M:%S")
                data_formatada = data_abertura.strftime('%d/%m/%Y %H:%M:%S')
            except Exception as e:
                st.error(f"Erro ao processar ocorr√™ncia (NF: {ocorr.get('Nota Fiscal', '-')}) ‚Äî {e}")
                continue

            with colunas[idx % 4]:
                safe_idx = f"{idx}_{ocorr.get('Nota Fiscal', '')}"

                with st.container():
                    st.markdown(
                        f"<div style='background-color:{cor};padding:10px;border-radius:10px;color:white;"
                        f"box-shadow: 0 4px 10px rgba(0,0,0,0.3);margin-bottom:5px;min-height:250px;font-size:15px;'>"
                        f"<strong>Status:</strong> <span style='background-color:#2c3e50;padding:4px 8px;border-radius:1px;color:white;'>{status}</span><br>"
                        f"<strong>NF:</strong> {ocorr.get('Nota Fiscal', '-')}<br>"
                        f"<strong>Cliente:</strong> {ocorr.get('Cliente', '-')}<br>"
                        f"<strong>Cidade:</strong> {ocorr.get('Cidade', '-')}<br>"
                        f"<strong>Motorista:</strong> {ocorr.get('Motorista', '-')}<br>"
                        f"<strong>Tipo:</strong> {ocorr.get('Tipo de Ocorr√™ncia', '-')}<br>"
                        f"<strong>Aberto por:</strong> {ocorr.get('Respons√°vel', '-')}<br>"
                        f"<strong>Data/Hora Abertura:</strong> {data_formatada}<br>"
                        "</div>",
                        unsafe_allow_html=True
                    )

                    with st.expander("Finalizar Ocorr√™ncia"):  # ‚ùå Sem controle de estado expandido
                        complemento = st.text_area("Complemento", key=f"complemento_final_{safe_idx}")
                        if st.button("Finalizar", key=f"finalizar_{safe_idx}"):
                            if not complemento.strip():
                                st.error("‚ùå O campo 'Complementar' √© obrigat√≥rio para finalizar a ocorr√™ncia.")
                            else:
                                ocorr["Complementar"] = complemento
                                agora_sp = datetime.now(pytz.timezone("America/Sao_Paulo"))
                                ocorr["Data/Hora Finaliza√ß√£o"] = agora_sp.strftime("%d/%m/%Y %H:%M:%S")
                                ocorr["Status"] = status
                                ocorr["Cor"] = cor
                                ocorr["Finalizada"] = True
                                 # üïí Calcula o tempo de perman√™ncia
                                try:
                                    dt_abertura = datetime.strptime(ocorr["Data/Hora Abertura"], "%d/%m/%Y %H:%M:%S")
                                    dt_fim = datetime.strptime(ocorr["Data/Hora Finaliza√ß√£o"], "%d/%m/%Y %H:%M:%S")
                                    ocorr["Tempo de Perman√™ncia"] = str(dt_fim - dt_abertura)
                                except Exception as e:
                                    ocorr["Tempo de Perman√™ncia"] = "Erro ao calcular"

                                salvar_ocorrencia_finalizada(ocorr, status)

                                st.session_state.ocorrencias_finalizadas.append(ocorr)
                                st.session_state.ocorrencias_abertas.pop(idx)
                                st.session_state["mensagem_sucesso_finalizacao"] = True
                                st.rerun()  # Substituto oficial para experimental_rerun()



                            

# =========================
#     ABA 3 - FINALIZADAS
# =========================
with aba3:
    st.markdown("### üîé Filtro por Nota Fiscal")

    col_filtro, _ = st.columns([1, 5])  # Campo no canto esquerdo
    with col_filtro:
        nf_busca = st.text_input("Nota Fiscal", placeholder="Nota Fiscal")

    # Usa somente ocorr√™ncias finalizadas
    ocorrencias = st.session_state.get("ocorrencias_finalizadas", [])

    # Se houver algo digitado, aplica o filtro
    if nf_busca:
        ocorrencias_filtradas = [
            ocorr for ocorr in ocorrencias
            if nf_busca.strip() in str(ocorr.get("Nota Fiscal", ""))]
    else:
        ocorrencias_filtradas = ocorrencias

    # Caso n√£o existam ocorr√™ncias finalizadas
    if not ocorrencias_filtradas:
        st.info("‚ÑπÔ∏è Nenhuma ocorr√™ncia finalizada encontrada.")
    else:
        # Divide o layout em 4 colunas
        colunas = st.columns(4)
        
        # Calculando o tempo de perman√™ncia
        for idx, ocorr in enumerate(ocorrencias_filtradas):

            # Obt√©m as datas de abertura e finaliza√ß√£o da ocorr√™ncia
            data_abertura_str = ocorr.get("Data/Hora Abertura")
            data_finalizacao_str = ocorr.get("Data/Hora Finaliza√ß√£o")
            
            try:
                # C√°lculo do tempo de perman√™ncia
                data_abertura = datetime.strptime(data_abertura_str, "%d/%m/%Y %H:%M:%S")
                data_finalizacao = datetime.strptime(data_finalizacao_str, "%d/%m/%Y %H:%M:%S")
                
                tempo_permanencia = data_finalizacao - data_abertura
                tempo_permanencia_str = str(tempo_permanencia)

                status = ocorr.get("Status", "‚è±Ô∏è Tempo desconhecido")
                cor = ocorr.get("Cor", "#95a5a6")

            except Exception as e:
                st.error(f"Erro ao processar ocorr√™ncia (NF: {ocorr.get('Nota Fiscal', '-')}) ‚Äî {e}")
                continue

            # Seleciona uma das colunas dispon√≠veis para exibir o card
            with colunas[idx % 4]:
                status = ocorr.get("Status", "Desconhecido")
                cor = ocorr.get("Cor", "#777")

                with st.container():
                    st.markdown(
                        f"<div style='background-color:{cor};padding:10px;border-radius:10px;color:white;"
                        f"box-shadow: 0 4px 12px rgba(0,0,0,0.3);margin-bottom:30px;min-height: 300px;font-size:14px;'>"
                        
                        # Exibe o status
                        f"<strong>Status:</strong> <span style='background-color:#2c3e50;padding:4px 8px;border-radius:5px;color:white;'>{status}</span><br>"

                        # Exibe o n√∫mero da nota fiscal
                        f"<strong>NF:</strong> {ocorr.get('Nota Fiscal', '-')}<br>"

                        # Exibe o nome do cliente
                        f"<strong>Cliente:</strong> {ocorr.get('Cliente', '-')}<br>"

                        # Exibe a cidade da ocorr√™ncia
                        f"<strong>Cidade:</strong> {ocorr.get('Cidade', '-')}<br>"

                        # Exibe o nome do motorista
                        f"<strong>Motorista:</strong> {ocorr.get('Motorista', '-')}<br>"

                        # Exibe o tipo de ocorr√™ncia
                        f"<strong>Tipo:</strong> {ocorr.get('Tipo de Ocorr√™ncia', '-')}<br>"

                        # Exibe quem abriu a ocorr√™ncia
                        f"<strong>Aberto por:</strong> {ocorr.get('Respons√°vel', '-')}<br>"

                        # Exibe a data/hora de abertura
                        f"<strong>Data/Hora Abertura:</strong> {data_abertura.strftime('%d/%m/%Y %H:%M:%S')}<br>"

                        # Exibe a data/hora de finaliza√ß√£o
                        f"<strong>Finalizado em:</strong> {ocorr.get('Data/Hora Finaliza√ß√£o', '-')}<br>"

                        # Exibe o campo complementar
                        f"<strong>Complementar:</strong> {ocorr.get('Complementar', '-')}<br>"

                        # Exibe o tempo de perman√™ncia da ocorr√™ncia (tempo entre abertura e finaliza√ß√£o)
                        f"<strong>Tempo de Perman√™ncia:</strong> {tempo_permanencia_str}<br>"

                        "</div>",
                        unsafe_allow_html=True
                    )

            # Salvando o tempo de perman√™ncia no relat√≥rio Excel
            ocorr["Tempo de Perman√™ncia"] = tempo_permanencia_str  # Adiciona o tempo de perman√™ncia √† ocorr√™ncia



